<launch>

<!-- Frames for Kinect sensor -->
  <node pkg="tf" type="static_transform_publisher" name="kinect_base" args="0.715 -1.07 1.8 1.58 0.87 0.0  /base_link /openni_camera 100" />
  <node pkg="tf" type="static_transform_publisher" name="kinect_base_link" args="0 -0.02 0 0 0 0  /openni_camera /openni_depth_frame 100" />  
  <node pkg="tf" type="static_transform_publisher" name="kinect_base_link1" args="0 -0.04 0 0 0 0  /openni_camera /openni_rgb_frame 100" />  
  <node pkg="tf" type="static_transform_publisher" name="kinect_base_link2" args="0 0 0 -1.57 0 -1.57 /openni_depth_frame /openni_depth_optical_frame  100" />  
  <node pkg="tf" type="static_transform_publisher" name="kinect_base_link3" args="0 0 0 -1.57 0 -1.57 /openni_rgb_frame /openni_rgb_optical_frame 100" />  

<!-- Pointcloud processing pipeline -->

  <node pkg="nodelet" type="nodelet" name="pcl_manager" args="manager" output="screen" />

  <node pkg="nodelet" type="nodelet" name="kinect" args="load openni_camera/OpenNINodelet pcl_manager">
    <param name="registration_type" value="2" />
    <param name="image_input_format" value="6" />
    <rosparam command="load" file="$(find openni_camera)/info/openni_params.yaml" />
  </node>
  
 <!-- Throttle pointcloud to 2Hz -->
 <node pkg="nodelet" type="nodelet" name="pointcloud_throttle" args="load pointcloud_to_laserscan/CloudThrottle pcl_manager">
    <param name="max_rate" value="2"/>
    <remap from="cloud_in" to="/camera/depth/points"/>
    <remap from="cloud_out" to="cloud_throttled"/>
  </node> 

  <!-- Run a VoxelGrid filter to clean NaNs and downsample the data -->
  <node pkg="nodelet" type="nodelet" name="voxel_grid" args="load pcl/VoxelGrid pcl_manager" output="screen">
    <remap from="~input" to="cloud_throttled" />
    <rosparam>
      filter_field_name: z
      filter_limit_min: 0.01
      filter_limit_max: 2.5
      filter_limit_negative: False
      leaf_size: 0.02
    </rosparam>
  </node>

  <!-- Remove robot from sensor data -->
  <node pkg="robot_self_filter" type="self_filter" name="self_filter" output="screen">
    <remap from="cloud_in" to="/voxel_grid/output" />
    <remap from="cloud_out" to="/cloud_selffiltered" />

    <rosparam command="load" file="$(find irp6_arm_navigation_launch)/config/self_filter.yaml" />
  </node> 

  <!-- Convert to old format -->
  <node pkg="point_cloud_converter" type="point_cloud_converter" name="converter" output="screen">
    <remap from="points2_in" to="/cloud_selffiltered" />
    <remap from="points_out" to="/cloud_selffiltered_old" />
  </node> 

  <!-- start collision map -->
  <include file="$(find irp6_arm_navigation_launch)/launch/collision_map_self_occ.launch" />
    
</launch>
